{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww15140\viewh12860\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Jaz Harris \
AP Computer Science Mr. Kiang \
\
	My main goal for this project was deceivingly simple: use GridWorld to make a chess simulator. I started off with the idea for seven classes: six for all six of the different kinds of pieces and one to be the main driver (which would also instantiate the board). I started the project with a solid plan of action. In my first work log I had it in my mind that I was going to have time to design not only chess, but two variants of the game. However, I quickly ran into problems. Firstly, how would I make the checkered board? Should I extend critter so I can get instances of the actors around the piece? How would I allow the player to pick where he or she wanted to move? It was overwhelming to say the least. In my first record of thinking I mention the issues of moving the pieces in grid world. I also bring up how Nolan was the one who finally got me to organize how I was going to implement the code. Because he's a methodical worker, he insisted on pseudo coding all the class methods and mapping out each class. This was incredibly useful when it came to the actual coding. \
	A week into my project I realized it wasn't going to be as easy as I had originally thought to make a chess game. It was time to simplify this: I decided to do checkers instead. Suggested by Mr. Kiang, checker would be easier since it only required really one type of move. Instead of six types of pieces, there were only two (though this turned into four since I split the pieces by color too). It was around this time, when we met with Mr. Kiang, that Nolan was moved to a slightly different task: an AI. Despite this, Nolan and I continued to code in parallel, sharing ideas to solve mutual problems. For example, through banter with my good friend Nolan I realized the best way to implement the board: use flowers, but replace their image to be a black square (to do so I received help from Wyatt). Nolan was originally going to do Black Jack, but I convinced him to jump to my project. Later on, I would be both incredibly grateful and guilty for this. As I mentioned in my first record of thinking, I'm more of a jump-straight-to-coding kind of programmer and he's more of a pseudo coder. By talking out the possible flaws of our design we were able to save a fair amount of time. Unfortunately (as seen in work logs up until very recently), I wasn't able to take advantage of the locationClicked() method. This was a huge hold up in the process because a large part of our planning was based on the idea of a double-click procedure to allow the player to pick their move. \
	I fell into the trap of getting fixated on a single way of doing something instead of trying different ways to do the same action. Because of this, I spent over a week trying to get a clicking method to work. In my second method of thinking, I was lamenting the locationClicked() method. In the TestWorld class there's a huge section of code commented out working with the locationClicked() method partnered with JOptionPanes. This took many long hours, but, in the end, was completely useless. The complications of using the locationClicked() method would require a level of understanding currently beyond me. Here I made a mistake: I got stuck and wasted time. After the extensive coding I did yielded no results, I despaired and suffered a major setback where I realized I would have to basically start over. So, at the beginning of the third week I gave up on the click method and focused my efforts instead on a new idea: left and right move methods. \
	Nolan has been great as both motivation and idea input. Whenever one of us started slacking, the other would check them in check. Nolan was also invaluable as an idea partner. Most of the ideas we ended up using came from our discussions (his input made it possible to get working pieces). For example, when I was majorly stuck on implementing a click using the locationClicked() method, it was Nolan's idea to make left and right move methods in the piece classes. If it wasn't for his idea, I would have (most likely) still been struggling with JOptionPanes or the locationClicked() method. For these reasons, I was grateful to have Nolan on the CleverGame-Check team, but given that he ended up with a significantly harder project than he originally planned it's somewhat regrettable. The level of difficulty was definitely a point of grief. But, if anything, I enjoyed the challenge as well as the opportunity to experience collaboration at this level. Having a fun, intelligent partner definitely made collaboration a privilege rather than a chore. I was lucky enough to be working with someone I communicated with daily, but I could see how there could be major issues if meeting outside of class was impossible. However, there was still a problem with integrating our separate classes when we went to finish off the project. My main issue was implementing a turn method (or a way to go between the player's turn and the AI's turn). Sadly, I wasn't able to complete this part of the project. \
	My partner wasn't the only one who helped in this endeavor. When I was trying to figure out how to change the appearance of actors, I got help from Wyatt. Wyatt also attempted to help with the issue with determining who's turn it was. He suggested a World.step() idea, which, though I didn't end up using, gave me the idea to call on a method at the end of each player's move to get the AI to move. Mr. Kiang was, of course, a huge help. I went in to conference several times trying to sort out a way to get the piece to move. Mr. Kiang was able to offer up several suggestions to get me thinking about different ways to approach the problem. \
	After all the collaboration, going in for help, and late nights spent with two mugs of coffee, the end result was, regrettably, not what I'd want it to be. We have a board and pieces that can eat other pieces and abide by the rules of checkers, but no compatible AI. Because of this, there isn't a working checkers game. I was hoping to at least code in move methods for the black pieces so there can be a two player game at the very least, but as of yet that's incomplete. Despite this, I'm proud of my project. The amount of thought and problem solving involved the last few weeks was both intense and fun. Though the result isn't ideal, it's still something I'm proud of. To have pieces abiding by the rules of checkers, a working board, and king pieces, took a lot of work, and I'm happy to have learned coding to the point where it was possible. If I were to do something differently in regards to this project I'd start with checkers and using move methods in the class. The combined time wasted on the locationClicked() method as well as chess made it difficult to present a finished product for this project. It's not that time management was awful, it was the complete overhauls made throughout the allotted time. Given that I had to start over twice, there's no wonder I barely got functioning pieces and a functioning board. Still, I believe I would have been able to solve the coding problems in trading off turns and integrating the AI if I had enough time. Overall, this was an amazingly positive experience. I strongly believe I'll finish off this project for personal challenge and enjoyment. \
\page }